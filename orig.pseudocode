#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "adlb.h"

double start_time, end_time;

int main(int argc, char *argv[])
{
    int i, j;
    int num_time_slices, num_As, num_servers;
    int priority_A = 0, priority_B = -2, priority_C = -1;
    MPI_Comm app_comm;

    num_time_slices = 120;
    num_servers = 1;
    num_As = 100;
    for (i=1; i < argc; i++)
    {
        if (strcmp(argv[i],"-nslices") == 0)
            num_time_slices = atoi(argv[i+1]);
        else if (strcmp(argv[i],"-nas") == 0)
            num_As = atoi(argv[i+1]);
        else if (strcmp(argv[i],"-nservers") == 0)
            num_servers = atoi(argv[i+1]);
    }
    rc = MPI_Init(&argc,&argv);
    MPI_Comm_size(MPI_COMM_WORLD,&num_nodes);
    MPI_Comm_rank(MPI_COMM_WORLD,&my_rank);
    num_slaves = num_nodes - num_servers - 1;

    // adlb decides which ranks are the servers
    rc = ADLB_Init(MPI_COMM_WORLD,num_servers,&app_comm);
    rc = MPI_Barrier();

    start_time = MPI_Wtime();

    if (my_rank == 0)  /* if master */
    {
        sum = 0;
        for (i=1; i <= XXXX; i++) //  one B per A per time_slice/40
        {
            printf("waiting for mpi_recv; i=%d\n",i);
            // results of B computations
            rc = MPI_Recv(&iv,1,MPI_INT,MPI_ANY_SOURCE,sum_mesg,MPI_COMM_WORLD,&status);
            node = status.MPI_SOURCE;
            sum += iv;
            printf("past mpi_recv; i=%d iv=%d\n",i,iv);
        }
        ADLB_Set_no_more_work();
        printf("expected sum = %d\n",exp_sum);
        printf("done:    sum = %d\n",sum);
    }
    else if (my_rank <= num_servers)
    {
        ADLB_Server(); /***** inside adlb, figure out who server's slaves are *****/
    }
    else  /* slave */
    {
        // put "my" As in the pool with priority_A
        while (1)
        {
            rc = ADLB_Reserve(&work_type,&from_rank,&answer_rank,&bufsize);
            if (rc == ADLB_NO_MORE_WORK)
                break;
            if (work_type == TYPE_A)
            {
                rc = ADLB_Get_reserved(from_rank,bufsize,work);
                for (40 times)
                {
                    workval = 0.0;
                    for (i=0; i < num_delay; i++)
                        workval = sqrt(workval + 1000000.0) + 1;
                    // printf("done %5.2f\n",MPI_Wtime()-start_time);
                    if (time_slice % 40 == 0  &&  time_slice < max_slices)
                        // Generate a new B
                        // Put new B in pool
                        priority_B -= 10;  // ?? priority of A -2
                    if (time_slice % 40 != 0  &&  time_slice < max_slices)
                        priority_A -= 10;
                        // Put A back in pool
                    time_slice++;
                }
            }
            else if (work_type == TYPE_B)
            {
                rc = ADLB_Get_reserved(my_rank,bufsize,work_b);
                /* put in C work */
                for (i=0; i < 8; i++)  /**** assuming 8 Cs per B *****/
                {
                    work_type = TYPE_C;
                    work_size = 20;
                    nbytes = work_size * sizeof(double);
                    for (i=0; i < work_size; i++)
                        work[i] = 1.0;
                    // Cs should have priority_B + 1
                    ierr = ADLB_Put(my_rank,my_rank,work_type,nbytes,work); 
                }
                for (i=0; i < 8; i++)
                {
                    // recv C answers
                    /***** FIX THIS RECV  *****/
                    rc = MPI_Recv(&iv,1,MPI_INT,MPI_ANY_SOURCE,C_ANS,MPI_COMM_WORLD,&status);
                    // accumulate this C into some accum val
                }
                // send result of Cs to master as a B result
                rc = MPI_Send(&mysum,1,MPI_INT,0,sum_mesg,MPI_COMM_WORLD);
            }
            else if (work_type == TYPE_C)
            {
                rc = ADLB_Get_reserved(bufsize,work_c);
                /**** DO C work THEN MPI_Send answer to answer_rank ****/
                /* delay is same as for A */
            }
        }
    }  /* slave */

    if (my_rank == 0)  /* if master */
    {
        end_time = MPI_Wtime();
        printf("total time = %10.2f\n",end_time-start_time);
    }
    ADLB_Finalize();
    MPI_Finalize();

    return 0;
}
