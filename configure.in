dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AC_INIT()
AC_PREREQ(2.52)
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER(adlb_conf.h)
#
echo "Configuring ADLB with $ac_configure_args"
dnl
dnl  Set top_srcdir_abs to be the ABSOLUTE path to the home directory of MPE
dnl  top_srcdir is in relative path.
if test "X$srcdir" != "X." -a -s $srcdir/adlb.h ; then
    top_srcdir_abs=$srcdir
else
    PAC_GETWD( top_srcdir_abs, adlb.h )
fi
AC_SUBST(top_srcdir_abs)


AC_ARG_ENABLE( echo,
[--enable-echo                      - Turn on strong echoing.
                                     The default is enable=no.],
set -x )

CC=${CC:-mpicc}
F77=${F77:-mpif90}
dnl Don't set CFLAGS here so AC_PROG_CC could add -g automatically.
# CFLAGS=${CFLAGS}
# FFLAGS=${FFLAGS}
MAKE=${MAKE:-make}

dnl Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)

dnl If we are relying on vpath and no vpath is set, then we must exit
if test ! -s adlb.h -a -z "$VPATH" ; then
    AC_MSG_ERROR( [No virtual MAKE path command found.
        You may need to set your make command
        The GNU make (sometimes available as gnumake) can be used.] )
fi

dnl CPRP is the version of cp that accepts -r and -p arguments.
MKDIR=mkdir
CPRP=cp
RM=rm
MV=mv
AC_SUBST(MKDIR)
AC_SUBST(CPRP)
AC_SUBST(RM)
AC_SUBST(MV)

AC_ARG_ENABLE( strict,
[--enable-strict                    - Turn on strict compilation testing
                                     when using gcc],,enable_strict=no )
dnl
AC_ARG_ENABLE( f77,
[--enable-f77                       - Compile routines that require a Fortran
                                     compiler.  The default is enable=yes.], ,
enable_f77=yes )
if test "$enable_f77" = "yes" ; then
    ADLB_BUILD_FORTRAN=yes
else
    ADLB_BUILD_FORTRAN=no
fi

AC_ARG_ENABLE( checkMPI,
[--enable-checkMPI                  - Turn on/off the linking test for the MPI
                                     include files, MPI libraries and CC
                                     compiler. The default is enable=yes.], ,
enable_checkMPI=yes )
dnl
AC_ARG_ENABLE( checkMPE,
[--enable-checkMPE                  - Turn on/off the linking test for the MPE
                                     include files, MPE libraries and CC
                                     compiler. The default is enable=yes.], ,
enable_checkMPE=yes )
if test "$enable_checkMPE" = "yes" ; then
    ADLB_BUILD_LOGGING=yes
else
    ADLB_BUILD_LOGGING=no
fi

dnl
dnl  Set the Fortran Include Library Leading Characters
dnl
AC_ARG_WITH( finc_path_leader,
[--with-finc_path_leader=FINC_PATH_LEADER - Specify a Fortran include path
                                     leader for compilation,
                                     default value is -I.],
FINC_PATH_LEADER="$withval" )

dnl
AC_ARG_WITH( flib_path_leader,
[--with-flib_path_leader=FLIB_PATH_LEADER - Specify a Fortran library path
                                     leader for linking, default value is -L.],
FLIB_PATH_LEADER="$withval" )

dnl
AC_ARG_WITH( config-args,
[--with-config-args=filename        - Specify configure argument file that
                                     contains the values of variables that
                                     configure reads, e.g. CC,F77,CFLAGS,FFLAGS.
                                     If the filename does not begin with
                                     / (absolute path), . or .. (relative path),
                                     the filename will be assumed to be
                                     $top_srcdir/configargs/<filename>.cfg.], ,
with_config_args=no )
dnl
if test "$with_config_args" != "no" ; then
    case "$with_config_args" in 
        /*|../*|./*)
            config_args_file="$with_config_args"
            ;;
        *)
            config_args_file="$srcdir/configargs/$with_config_args.cfg"
            ;;
    esac
    if test -s "$config_args_file" ; then
        AC_MSG_RESULT([Reading the configure arguments in ${config_args_file}.])
        . $config_args_file
        # Export all the variables in $config_args_file
        # i.e. CC, F77, CFLAGS, FFLAGS and friends...
        config_args_vars=`grep -v '^#' $config_args_file | sed -e 's/=.*//g'`
        for var in $config_args_vars ; do
            eval value=\$"$var"
            echo "Exporting $var=$value ..."
            export $var
        done
    else
        AC_MSG_WARN([Non-existent ${config_args_file}.])
    fi
fi



AC_PROG_CC
AC_CHECK_PROG(AR, ar, ar, ;)
AC_PROG_RANLIB

ADLB_COPTION=""
PAC_GET_GCC_STRICT_FLAGS([ADLB_COPTION])
if test "x$ADLB_COPTION" != "x" ; then
    CFLAGS="$CFLAGS $ADLB_COPTION"
fi

if test "$ALDB_BUILD_FORTRAN" = "yes" ; then
    AC_PROG_F77
    if test "x$F77" = "x" ; then
        ADLB_BUILD_FORTRAN=no
    fi
fi

AC_SUBST(ADLB_BUILD_FORTRAN)


    if test "$enable_checkMPI" = "yes" ; then
        AC_MSG_CHECKING( [for the linkage of the supplied MPI C definitions] )
        PAC_MPI_LINK_CC_FUNC( $CC, [$CFLAGS], [$LIBS], , , ,
                              [ adlb_link_ok=yes ], [ adlb_link_ok=no ] )
        if test "$adlb_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            AC_MSG_ERROR( [Cannot link with basic MPI C program!
        Check your MPI include paths, MPI libraries and MPI CC compiler.] )
        fi
    fi

    if test "$enable_checkMPI" = "yes" -a "$ADLB_BUILD_FORTRAN" = "yes" ; then
        AC_MSG_CHECKING( [for the linkage of the supplied MPI F77 definitions] )
        PAC_MPI_LINK_F77_FUNC( $F77, [$FFLAGS], [$LIBS $FLIBS], [
        integer mytid
        integer ierr
        ], [
        call MPI_Comm_rank( MPI_COMM_WORLD, mytid, ierr )
        ],
        [ adlb_link_ok=yes ], [ adlb_link_ok=no ] )
        if test "$adlb_link_ok" = "yes" ; then
            AC_MSG_RESULT(yes)
        else
            AC_MSG_RESULT(no)
            AC_MSG_ERROR( [Cannot link with basic MPI Fortran program!
        Check your MPI include paths, MPI libraries and MPI Fortran compiler.] )
        fi
    fi

if test -n "$F77" -a "$ADLB_BUILD_FORTRAN" = "yes" ; then
    FLIBS_save="$FLIBS"
    FLIBS=""
    AC_F77_LIBRARY_LDFLAGS
    # The autoconf macro for finding FLIBS sometimes makes mistakes
    # (particularly with the Fujitsu frt compiler).  This next step
    # first sees if the FLIBS is valid with the Fortran compiler
    PAC_PROG_F77_FLIBS_VALID
    # Now see if FLIBS works with the C compiler
    PAC_PROG_F77_CHECK_FLIBS

    PAC_PROG_F77_LINKER_WITH_C
    # For name mangle, we need the library flags
    PAC_PROG_F77_NAME_MANGLE
    # Check whether additional libraries are needed when linking with C
    PAC_PROG_F77_AND_C_STDIO_LIBS
    AC_SUBST(F77_OTHER_LIBS)

    PAC_PROG_F77_LIBRARY_DIR_FLAG
    if test -z "$FLIB_PATH_LEADER" ; then
        FLIB_PATH_LEADER=$F77_LIBDIR_LEADER
    fi
    PAC_PROG_F77_HAS_INCDIR(f77tmpdir)
    FINC_PATH_LEADER=$F77_INCDIR
fi

dnl  We need to check that this has worked.  The autoconf macro is broken
AC_PROG_CPP
if test "$CPP" = "/lib/cpp" -a ! -x /lib/cpp ; then
    AC_MSG_ERROR( [configure could not find a working C preprocessor] )
fi

if test "$ADLB_BUILD_LOGGING" = "yes" ; then
    AC_MSG_CHECKING( [for the MPE compiler flags] )
    MPILOG_FLAG="-mpe=mpilog"
    LOG_FLAG="-mpe=log"
    savedCFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $MPILOG_FLAG"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([#include "mpe.h"],[MPE_Init_log();])],
                   adlb_ok=yes,adlb_ok=no)
    CFLAGS="$savedCFLAGS"
    if test "$adlb_ok" = "yes" ; then
        AC_MSG_RESULT([$MPILOG_FLAG and $LOG_FLAG])
    else
        MPILOG_FLAG="-mpilog"
        LOG_FLAG="-log"
        savedCFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $MPILOG_FLAG"
        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include "mpe.h"],[MPE_Init_log();])],
                       adlb_ok=yes,adlb_ok=no)
        CFLAGS="$savedCFLAGS"
        if test "$adlb_ok" = "yes" ; then
            AC_MSG_RESULT([$MPILOG_FLAG and $LOG_FLAG])
        else
            MPILOG_FLAG=""
            LOG_FLAG=""
            ADLB_BUILD_LOGGING=no
            AC_MSG_RESULT([none])
            dnl If there isn't any MPE compiler flag,
            dnl should check for mpe.h, -llmpe and -lmpe.
        fi
    fi
fi
AC_SUBST(MPILOG_FLAG)
AC_SUBST(LOG_FLAG)
AC_SUBST(ADLB_BUILD_LOGGING)

AC_OUTPUT( Makefile )
